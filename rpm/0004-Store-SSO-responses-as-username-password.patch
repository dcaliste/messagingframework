From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Damien Caliste <dcaliste@free.fr>
Date: Mon, 5 Feb 2024 16:27:09 +0100
Subject: [PATCH] Store SSO responses as username/password.

Change-Id: Iecbebbfdad043b1debbc9fd15cf4f285b20aa5cc
---
 .../qmfmessageserver/qmailauthenticator.cpp   |  20 +--
 .../qmfmessageserver/qmailauthenticator.h     |   4 -
 .../qmfmessageserver/qmfmessageserver.pro     |   9 --
 src/libraries/qmfwidgets/qmfwidgets.pro       |   6 -
 .../imap/imapauthenticator.cpp                |  89 ------------
 .../messageservices/imap/imapauthenticator.h  |   5 -
 .../messageservices/imap/imapclient.cpp       |  68 ++++-----
 src/plugins/messageservices/imap/imapclient.h |   2 +-
 .../messageservices/imap/imapprotocol.cpp     |  31 -----
 .../messageservices/imap/imapprotocol.h       |   4 -
 .../messageservices/pop/popauthenticator.cpp  |  33 +----
 .../messageservices/pop/popauthenticator.h    |   4 -
 src/plugins/messageservices/pop/popclient.cpp |  14 +-
 src/plugins/messageservices/pop/popclient.h   |   2 +-
 .../smtp/smtpauthenticator.cpp                | 121 +---------------
 .../messageservices/smtp/smtpauthenticator.h  |   5 -
 .../messageservices/smtp/smtpclient.cpp       | 125 +++++------------
 src/plugins/messageservices/smtp/smtpclient.h |  14 +-
 .../ssoauth/password/passwordplugin.cpp       | 131 +-----------------
 src/plugins/ssoauth/password/passwordplugin.h |   4 -
 20 files changed, 92 insertions(+), 599 deletions(-)

diff --git a/src/libraries/qmfmessageserver/qmailauthenticator.cpp b/src/libraries/qmfmessageserver/qmailauthenticator.cpp
index 212dc33f..81983691 100644
--- a/src/libraries/qmfmessageserver/qmailauthenticator.cpp
+++ b/src/libraries/qmfmessageserver/qmailauthenticator.cpp
@@ -32,6 +32,7 @@
 ****************************************************************************/
 
 #include "qmailauthenticator.h"
+#include "qmailnamespace.h"
 #include <qmailserviceconfiguration.h>
 #include <qcryptographichash.h>
 #include <qbytearray.h>
@@ -147,23 +148,6 @@ QByteArray QMailAuthenticator::getAuthentication(const QMailAccountConfiguration
     should be decoded before invocation, and the result should be encoded for
     transmission.
 */
-#ifdef USE_ACCOUNTS_QT
-QByteArray QMailAuthenticator::getResponse(const QMailAccountConfiguration::ServiceConfiguration &svcCfg, const QByteArray &challenge,
-                                           const QMail::SaslMechanism authType, const QString &password)
-{
-    QMailServiceConfiguration configuration(svcCfg);
-    if (!configuration.value(QLatin1String("smtpusername")).isEmpty() && authType == QMail::CramMd5Mechanism) {
-        // SMTP server CRAM-MD5 authentication
-        return cramMd5Response(challenge, configuration.value(QLatin1String("smtpusername")).toUtf8(), password.toUtf8());
-    } else if (authType == QMail::CramMd5Mechanism) {
-        // IMAP/POP server CRAM-MD5 authentication
-        return cramMd5Response(challenge, configuration.value(QLatin1String("username")).toUtf8(), password.toUtf8());
-    }
-
-    // Unknown service type and/or authentication type
-    return QByteArray();
-}
-#else
 QByteArray QMailAuthenticator::getResponse(const QMailAccountConfiguration::ServiceConfiguration &svcCfg, const QByteArray &challenge)
 {
     QMailServiceConfiguration configuration(svcCfg);
@@ -181,4 +165,4 @@ QByteArray QMailAuthenticator::getResponse(const QMailAccountConfiguration::Serv
     // Unknown service type and/or authentication type
     return QByteArray();
 }
-#endif
+
diff --git a/src/libraries/qmfmessageserver/qmailauthenticator.h b/src/libraries/qmfmessageserver/qmailauthenticator.h
index 6d7e5752..4e235fb1 100644
--- a/src/libraries/qmfmessageserver/qmailauthenticator.h
+++ b/src/libraries/qmfmessageserver/qmailauthenticator.h
@@ -46,11 +46,7 @@ public:
     static bool useEncryption(const QMailAccountConfiguration::ServiceConfiguration &svcCfg, const QStringList &capabilities);
     static QMail::SaslMechanism authFromCapabilities(const QStringList &capabilities);
     static QByteArray getAuthentication(const QMailAccountConfiguration::ServiceConfiguration &svcCfg, const QStringList &capabilities);
-#ifdef USE_ACCOUNTS_QT
-    static QByteArray getResponse(const QMailAccountConfiguration::ServiceConfiguration &svcCfg, const QByteArray &challenge, const QMail::SaslMechanism authType, const QString &password);
-#else
     static QByteArray getResponse(const QMailAccountConfiguration::ServiceConfiguration &svcCfg, const QByteArray &challenge);
-#endif
 };
 
 #endif
diff --git a/src/libraries/qmfmessageserver/qmfmessageserver.pro b/src/libraries/qmfmessageserver/qmfmessageserver.pro
index 62d1e28d..b042ba2b 100644
--- a/src/libraries/qmfmessageserver/qmfmessageserver.pro
+++ b/src/libraries/qmfmessageserver/qmfmessageserver.pro
@@ -39,12 +39,3 @@ SOURCES += qmailauthenticator.cpp \
            qmailtransport.cpp \
            qmailheartbeattimer_qtimer.cpp # NB: There are multiple implementations
 
-
-# FIXME this will result in prl file having explicit linkage against qt-xml and accounts+signon.
-# Should probably have LIBS_PRIVATE type of usage, but now as there are even some header differences
-# on accounts enabled version, let's just allow the dependency. See also qmfclient.pro
-contains(DEFINES,USE_ACCOUNTS_QT) {
-    CONFIG += link_pkgconfig
-    PKGCONFIG += accounts-qt5
-    PKGCONFIG += libsignon-qt5
-}
diff --git a/src/libraries/qmfwidgets/qmfwidgets.pro b/src/libraries/qmfwidgets/qmfwidgets.pro
index dafd090a..ddff356e 100644
--- a/src/libraries/qmfwidgets/qmfwidgets.pro
+++ b/src/libraries/qmfwidgets/qmfwidgets.pro
@@ -41,9 +41,3 @@ TRANSLATIONS += libqmfutil-ar.ts \
 
 RESOURCES += qmfutil.qrc
 
-contains(DEFINES,USE_ACCOUNTS_QT) {
-    CONFIG += link_pkgconfig
-    QT += xml
-    PKGCONFIG += accounts-qt5
-    PKGCONFIG += libsignon-qt5
-}
diff --git a/src/plugins/messageservices/imap/imapauthenticator.cpp b/src/plugins/messageservices/imap/imapauthenticator.cpp
index dde528f3..6319aebb 100644
--- a/src/plugins/messageservices/imap/imapauthenticator.cpp
+++ b/src/plugins/messageservices/imap/imapauthenticator.cpp
@@ -39,16 +39,6 @@
 #include <qmailauthenticator.h>
 #include <qmailtransport.h>
 #include <qmailnamespace.h>
-#include <qmaillog.h>
-#include <qmailstore.h>
-
-#ifdef USE_ACCOUNTS_QT
-namespace {
-QString authPassword;
-QMail::SaslMechanism responseAuthType;
-QByteArray gResponse;
-}
-#endif
 
 bool ImapAuthenticator::useEncryption(const QMailAccountConfiguration::ServiceConfiguration &svcCfg, const QStringList &capabilities)
 {
@@ -73,79 +63,7 @@ bool ImapAuthenticator::useEncryption(const QMailAccountConfiguration::ServiceCo
     return QMailAuthenticator::useEncryption(svcCfg, capabilities);
 #endif
 }
-#ifdef USE_ACCOUNTS_QT
-static QByteArray authenticationResponses(QList<QByteArray> &authList, const QMail::SaslMechanism &authType, const QMailAccountId &id)
-{
-    QByteArray result;
-    if(!authList.empty()) {
-        result = authList.takeFirst();
-        if (!authList.empty()) {
-            if (authType == QMail::CramMd5Mechanism) {
-                authPassword = QString::fromLatin1(authList.takeFirst());
-                responseAuthType = QMail::CramMd5Mechanism;
-            } else {
-                gResponse = authList.first();
-                responseAuthType = authType;
-            }
-        }
-    } else {
-        qMailLog(IMAP) << "Failed to get authentication for method" << authType << "in account id:" << id;
-    }
-    return result;
-}
-
-
-QByteArray ImapAuthenticator::getAuthentication(const QMailAccountConfiguration::ServiceConfiguration &svcCfg, const QStringList &capabilities, const QMap<QString, QList<QByteArray> > &ssoLogin)
-{
-    QByteArray result;
-    ImapConfiguration imapCfg(svcCfg);
-    QMailAccountId id(imapCfg.id());
-    QMail::SaslMechanism authType = static_cast<QMail::SaslMechanism>(imapCfg.mailAuthentication());
-
-    // if we don't have auth yet, try to get it from the capabilities
-    if (ssoLogin.size() > 1 && authType == QMail::NoMechanism) {
-        qMailLog(IMAP) << "Discovering authentication from capabilities for account id:" << id;
-        authType = QMailAuthenticator::authFromCapabilities(capabilities);
-        if (authType != QMail::NoMechanism) {
-            QMailAccount account(id);
-            QMailAccountConfiguration accountConfig(id);
-            QMailAccountConfiguration::ServiceConfiguration serviceConf(accountConfig.serviceConfiguration("imap4"));
-            serviceConf.setValue("authentication",QString::number(authType));
-            if (!QMailStore::instance()->updateAccount(&account, &accountConfig)) {
-                qWarning() << "Unable to update account" << account.id() << "to auth type!!!!";
-            }
-        }
-    }
 
-    if (authType != QMail::NoMechanism) {
-        if (!ssoLogin.isEmpty()) {
-            QList<QByteArray> auth;
-            if (ssoLogin.size() == 1) {
-                QList<QString> keys = ssoLogin.keys();
-                auth = ssoLogin.value(keys.at(0));
-                result = authenticationResponses(auth, authType, id);
-                qMailLog(IMAP) << "Using authentication method " << keys.at(0)
-                               << " for account id:" << id;
-            } else {
-                if (authType == QMail::CramMd5Mechanism) {
-                    auth = ssoLogin.value("CRAM-MD5");
-                    result = authenticationResponses(auth, authType, id);
-                } else if (authType == QMail::PlainMechanism) {
-                    auth = ssoLogin.value("PLAIN");
-                    result = authenticationResponses(auth, authType, id);
-                } else if (authType == QMail::LoginMechanism) {
-                    auth = ssoLogin.value("LOGIN");
-                    result = authenticationResponses(auth, authType, id);
-                }
-            }
-        } else {
-            qMailLog(IMAP) << Q_FUNC_INFO << "SSO identity is not found for account id: "<< id
-                           << ", returning empty authentication";
-        }
-    }
-    return result;
-}
-#else
 QByteArray ImapAuthenticator::getAuthentication(const QMailAccountConfiguration::ServiceConfiguration &svcCfg, const QStringList &capabilities)
 {
     QByteArray result(QMailAuthenticator::getAuthentication(svcCfg, capabilities));
@@ -161,17 +79,10 @@ QByteArray ImapAuthenticator::getAuthentication(const QMailAccountConfiguration:
     return QByteArray("LOGIN") + ' ' + ImapProtocol::quoteString(imapCfg.mailUserName().toLatin1())
                                + ' ' + ImapProtocol::quoteString(imapCfg.mailPassword().toLatin1());
 }
-#endif
 
 QByteArray ImapAuthenticator::getResponse(const QMailAccountConfiguration::ServiceConfiguration &svcCfg, const QByteArray &challenge)
 {
-#ifdef USE_ACCOUNTS_QT
-    QByteArray response(QMailAuthenticator::getResponse(svcCfg, challenge, responseAuthType, authPassword));
-    if (response.isEmpty())
-        response = gResponse;
-#else
     const QByteArray response(QMailAuthenticator::getResponse(svcCfg, challenge));
-#endif
     if (!response.isEmpty())
         return response;
 
diff --git a/src/plugins/messageservices/imap/imapauthenticator.h b/src/plugins/messageservices/imap/imapauthenticator.h
index 02b3d67c..3a9bdf8d 100644
--- a/src/plugins/messageservices/imap/imapauthenticator.h
+++ b/src/plugins/messageservices/imap/imapauthenticator.h
@@ -43,13 +43,8 @@ class ImapAuthenticator
 {
 public:
     static bool useEncryption(const QMailAccountConfiguration::ServiceConfiguration &svcCfg, const QStringList &capabilities);
-#ifdef USE_ACCOUNTS_QT
-    static QByteArray getAuthentication(const QMailAccountConfiguration::ServiceConfiguration &svcCfg, const QStringList &capabilities, const QMap<QString, QList<QByteArray> > &ssoLogin);
-#else
     static QByteArray getAuthentication(const QMailAccountConfiguration::ServiceConfiguration &svcCfg, const QStringList &capabilities);
-#endif
     static QByteArray getResponse(const QMailAccountConfiguration::ServiceConfiguration &svcCfg, const QByteArray &challenge);
-
 };
 
 #endif
diff --git a/src/plugins/messageservices/imap/imapclient.cpp b/src/plugins/messageservices/imap/imapclient.cpp
index 4b78bf91..b38fde1b 100644
--- a/src/plugins/messageservices/imap/imapclient.cpp
+++ b/src/plugins/messageservices/imap/imapclient.cpp
@@ -182,11 +182,7 @@ class IdleProtocol : public ImapProtocol {
     Q_OBJECT
 
 public:
-#ifdef USE_ACCOUNTS_QT
-    IdleProtocol(ImapClient *client, const QMailFolder &folder, const bool ssoAccount, QMap<QString, QList<QByteArray> > &ssoLogin);
-#else
     IdleProtocol(ImapClient *client, const QMailFolder &folder);
-#endif
     virtual ~IdleProtocol() {}
 
     virtual void handleIdling() { _client->idling(_folder.id()); }
@@ -194,6 +190,7 @@ public:
 #ifdef USE_ACCOUNTS_QT
     int idleRetryDelay() { return _idleRetryDelay; }
 #endif
+    void setLogin(const QString &username, const QString &password);
 
 signals:
     void idleNewMailNotification(QMailFolderId);
@@ -218,22 +215,14 @@ private:
     QTimer _idleTimer; // Send a DONE command every 29 minutes
 #endif
     QTimer _idleRecoveryTimer; // Check command hasn't hung
+    QString _username, _password;
 #ifdef USE_ACCOUNTS_QT
     int _idleRetryDelay; // Try to restablish IDLE state
     enum IdleRetryDelay { InitialIdleRetryDelay = 30 }; //seconds
-    bool _ssoAccount;
-    QMap<QString, QList<QByteArray> > _ssoLogin;
 #endif
 };
 
-#ifdef USE_ACCOUNTS_QT
-IdleProtocol::IdleProtocol(ImapClient *client, const QMailFolder &folder, const bool ssoAccount, QMap<QString, QList<QByteArray> > &ssoLogin)
-    : _idleRetryDelay(InitialIdleRetryDelay),
-      _ssoAccount(ssoAccount),
-      _ssoLogin(ssoLogin)
-#else
 IdleProtocol::IdleProtocol(ImapClient *client, const QMailFolder &folder)
-#endif
 {
     _client = client;
     _folder = folder;
@@ -262,6 +251,12 @@ bool IdleProtocol::open(const ImapConfiguration& config, qint64 bufferSize)
     return ImapProtocol::open(config, bufferSize);
 }
 
+void IdleProtocol::setLogin(const QString &username, const QString &password)
+{
+    _username = username;
+    _password = password;
+}
+
 void IdleProtocol::idleContinuation(ImapCommand command, const QString &type)
 {
     const int idleTimeout = 28*60*1000;
@@ -308,6 +303,11 @@ void IdleProtocol::idleCommandTransition(const ImapCommand command, const Operat
     }
     
     QMailAccountConfiguration config(_client->account());
+    if (!_username.isEmpty() && !_password.isEmpty()) {
+        ImapConfigurationEditor editor(&config);
+        editor.setMailUserName(_username);
+        editor.setMailPassword(_password);
+    }
     switch( command ) {
         case IMAP_Init:
         {
@@ -330,28 +330,13 @@ void IdleProtocol::idleCommandTransition(const ImapCommand command, const Operat
                     break;
                 }
             }
-#ifdef USE_ACCOUNTS_QT
-            // We are now connected
-            if (_ssoAccount)
-                sendLogin(config, _ssoLogin);
-            else
-                sendLogin(config, QMap<QString, QList<QByteArray> >());
-#else
             // We are now connected
             sendLogin(config);
-#endif
             return;
         }
         case IMAP_StartTLS:
         {
-#ifdef USE_ACCOUNTS_QT
-        if (_ssoAccount)
-            sendLogin(config, _ssoLogin);
-        else
-            sendLogin(config, QMap<QString, QList<QByteArray> >());
-#else
             sendLogin(config);
-#endif
             break;
         }
         case IMAP_Login: // Fall through
@@ -731,7 +716,7 @@ void ImapClient::commandTransition(ImapCommand command, OperationStatus status)
                     _sendLogin = true;
                     ssoProcessLogin();
                 } else
-                    _protocol.sendLogin(_config, QMap<QString, QList<QByteArray> >());
+                    _protocol.sendLogin(_config);
 #else
                 _protocol.sendLogin(_config);
 #endif
@@ -747,7 +732,7 @@ void ImapClient::commandTransition(ImapCommand command, OperationStatus status)
                 _sendLogin = true;
                 ssoProcessLogin();
             } else
-                _protocol.sendLogin(_config, QMap<QString, QList<QByteArray> >());
+                _protocol.sendLogin(_config);
 #else
             _protocol.sendLogin(_config);
 #endif
@@ -1858,12 +1843,8 @@ void ImapClient::monitor(const QMailFolderIdList &mailboxIds)
     foreach(QMailFolderId id, mailboxIds) {
         if (!_monitored.contains(id)) {
             ++count;
-#ifdef USE_ACCOUNTS_QT
-            bool ssoAccount = _ssoSessionManager != 0;
-            IdleProtocol *protocol = new IdleProtocol(this, QMailFolder(id), ssoAccount, _ssoLogin);
-#else
             IdleProtocol *protocol = new IdleProtocol(this, QMailFolder(id));
-#endif
+            protocol->setLogin(ssoUsername, ssoPassword);
             protocol->setObjectName(QString("I:%1").arg(count));
             _monitored.insert(id, protocol);
             connect(protocol, SIGNAL(idleNewMailNotification(QMailFolderId)),
@@ -1957,7 +1938,12 @@ void ImapClient::ssoProcessLogin()
     } else {
         if (_sendLogin && !_ssoSessionManager->waitForSso()) {
             _sendLogin = false;
-            _protocol.sendLogin(_config, _ssoLogin);
+            ImapConfigurationEditor editor(&_config);
+            if (!ssoUsername.isEmpty())
+                editor.setMailUserName(ssoUsername);
+            if (!ssoPassword.isEmpty())
+                editor.setMailPassword(ssoPassword);
+            _protocol.sendLogin(_config);
         } else {
             qMailLog(IMAP) << Q_FUNC_INFO << "Waiting for SSO...";
         }
@@ -1977,7 +1963,8 @@ void ImapClient::onSsoSessionResponse(const QMap<QString,QList<QByteArray> > &ss
 {
     qMailLog(IMAP)  << "Got SSO response";
     if (!ssoLogin.isEmpty()) {
-        _ssoLogin = ssoLogin;
+        ssoUsername = QString::fromUtf8(ssoLogin.value(QString::fromLatin1("username")).value(0));
+        ssoPassword = QString::fromUtf8(ssoLogin.value(QString::fromLatin1("password")).value(0));
     }
 
     if (_loginFailed) {
@@ -1986,7 +1973,12 @@ void ImapClient::onSsoSessionResponse(const QMap<QString,QList<QByteArray> > &ss
         return;
     }
     if (_sendLogin) {
-        _protocol.sendLogin(_config, _ssoLogin);
+        ImapConfigurationEditor editor(&_config);
+        if (!ssoUsername.isEmpty())
+            editor.setMailUserName(ssoUsername);
+        if (!ssoPassword.isEmpty())
+            editor.setMailPassword(ssoPassword);
+        _protocol.sendLogin(_config);
     } else if (_waitingForIdle) {
         monitor(_waitingForIdleFolderIds);
     }
diff --git a/src/plugins/messageservices/imap/imapclient.h b/src/plugins/messageservices/imap/imapclient.h
index f29335c6..a8116820 100644
--- a/src/plugins/messageservices/imap/imapclient.h
+++ b/src/plugins/messageservices/imap/imapclient.h
@@ -205,7 +205,7 @@ private:
     bool _loginFailed;
     bool _sendLogin;
     bool _recreateIdentity;
-    QMap<QString, QList<QByteArray> > _ssoLogin;
+    QString ssoUsername, ssoPassword;
 #endif
 };
 
diff --git a/src/plugins/messageservices/imap/imapprotocol.cpp b/src/plugins/messageservices/imap/imapprotocol.cpp
index ab8de4e3..5b38d064 100644
--- a/src/plugins/messageservices/imap/imapprotocol.cpp
+++ b/src/plugins/messageservices/imap/imapprotocol.cpp
@@ -561,11 +561,7 @@ class LoginState : public ImapState
 public:
     LoginState() : ImapState(IMAP_Login, "Login") { LoginState::init(); }
 
-#ifdef USE_ACCOUNTS_QT
-    void setConfiguration(const QMailAccountConfiguration &config, const QStringList &capabilities, const QMap<QString, QList<QByteArray> > &ssoLogin);
-#else
     void setConfiguration(const QMailAccountConfiguration &config, const QStringList &capabilities);
-#endif
 
     void init() override;
     QString transmit(ImapContext *c) override;
@@ -575,19 +571,8 @@ public:
 private:
     QMailAccountConfiguration _config;
     QStringList _capabilities;
-#ifdef USE_ACCOUNTS_QT
-    QMap<QString, QList<QByteArray> > _ssoLogin;
-#endif
 };
 
-#ifdef USE_ACCOUNTS_QT
-void LoginState::setConfiguration(const QMailAccountConfiguration &config, const QStringList &capabilities, const QMap<QString, QList<QByteArray> > &ssoLogin)
-{
-    _config = config;
-    _capabilities = capabilities;
-    _ssoLogin = ssoLogin;
-}
-#else
 void LoginState::setConfiguration(const QMailAccountConfiguration &config, const QStringList &capabilities)
 {
     _config = config;
@@ -612,25 +597,17 @@ void LoginState::setConfiguration(const QMailAccountConfiguration &config, const
         }
     }
 }
-#endif
 
 void LoginState::init()
 {
     ImapState::init();
     _config = QMailAccountConfiguration();
     _capabilities = QStringList();
-#ifdef USE_ACCOUNTS_QT
-    _ssoLogin = QMap<QString, QList<QByteArray> >();
-#endif
 }
 
 QString LoginState::transmit(ImapContext *c)
 {
-#ifdef USE_ACCOUNTS_QT
-    return c->sendCommand(ImapAuthenticator::getAuthentication(_config.serviceConfiguration("imap4"), _capabilities, _ssoLogin));
-#else
     return c->sendCommand(ImapAuthenticator::getAuthentication(_config.serviceConfiguration("imap4"), _capabilities));
-#endif
 }
 
 bool LoginState::continuationResponse(ImapContext *c, const QString &received)
@@ -3249,19 +3226,11 @@ void ImapProtocol::sendStartTLS()
     _fsm->setState(&_fsm->startTlsState);
 }
 
-#ifdef USE_ACCOUNTS_QT
-void ImapProtocol::sendLogin(const QMailAccountConfiguration &config , const QMap<QString, QList<QByteArray> > &ssoLogin)
-{
-    _fsm->loginState.setConfiguration(config, _capabilities, ssoLogin);
-    _fsm->setState(&_fsm->loginState);
-}
-#else
 void ImapProtocol::sendLogin( const QMailAccountConfiguration &config )
 {
     _fsm->loginState.setConfiguration(config, _capabilities);
     _fsm->setState(&_fsm->loginState);
 }
-#endif
 
 void ImapProtocol::sendLogout()
 {
diff --git a/src/plugins/messageservices/imap/imapprotocol.h b/src/plugins/messageservices/imap/imapprotocol.h
index 166919b8..82fbb2f1 100644
--- a/src/plugins/messageservices/imap/imapprotocol.h
+++ b/src/plugins/messageservices/imap/imapprotocol.h
@@ -176,11 +176,7 @@ public:
     /*  Valid in non-authenticated state only    */
     void sendCapability();
     void sendStartTLS();
-#ifdef USE_ACCOUNTS_QT
-    void sendLogin(const QMailAccountConfiguration &config, const QMap<QString, QList<QByteArray> > &ssoLogin);
-#else
     void sendLogin(const QMailAccountConfiguration &config);
-#endif
 
     /* Valid in authenticated state only    */
     void sendList(const QMailFolder &reference, const QString &mailbox);
diff --git a/src/plugins/messageservices/pop/popauthenticator.cpp b/src/plugins/messageservices/pop/popauthenticator.cpp
index 843b1675..34b9c422 100644
--- a/src/plugins/messageservices/pop/popauthenticator.cpp
+++ b/src/plugins/messageservices/pop/popauthenticator.cpp
@@ -38,16 +38,6 @@
 #include <qmailauthenticator.h>
 #include <qmailtransport.h>
 
-#include <qmaillog.h>
-
-#ifdef USE_ACCOUNTS_QT
-namespace {
-
-QString authPassword;
-QMail::SaslMechanism responseAuthType;
-
-}
-#endif
 
 bool PopAuthenticator::useEncryption(const QMailAccountConfiguration::ServiceConfiguration &svcCfg, const QStringList &capabilities)
 {
@@ -78,23 +68,6 @@ bool PopAuthenticator::useEncryption(const QMailAccountConfiguration::ServiceCon
 #endif
 }
 
-#ifdef USE_ACCOUNTS_QT
-QList<QByteArray> PopAuthenticator::getAuthentication(const QMailAccountConfiguration::ServiceConfiguration &svcCfg, const QStringList &capabilities, const QMap<QString, QList<QByteArray> > &ssoLogin)
-{
-    Q_UNUSED(capabilities);
-    QList<QByteArray> result;
-
-    // Currently pop account does not have any auth settings, so only plain can be used
-    if(ssoLogin.isEmpty()){
-        PopConfiguration popCfg(svcCfg);
-        qMailLog(POP) << Q_FUNC_INFO << "SSO identity is not found for account id: "<< popCfg.id()
-                      << ", returning empty authentication";
-    } else {
-        result = ssoLogin.value("PLAIN");
-    }
-    return result;
-}
-#else
 QList<QByteArray> PopAuthenticator::getAuthentication(const QMailAccountConfiguration::ServiceConfiguration &svcCfg, const QStringList &capabilities)
 {
     QList<QByteArray> result;
@@ -112,13 +85,9 @@ QList<QByteArray> PopAuthenticator::getAuthentication(const QMailAccountConfigur
 
     return result;
 }
-#endif
+
 QByteArray PopAuthenticator::getResponse(const QMailAccountConfiguration::ServiceConfiguration &svcCfg, const QByteArray &challenge)
 {
-#ifdef USE_ACCOUNTS_QT
-    return QMailAuthenticator::getResponse(svcCfg, challenge, responseAuthType, authPassword);
-#else
     return QMailAuthenticator::getResponse(svcCfg, challenge);
-#endif
 }
 
diff --git a/src/plugins/messageservices/pop/popauthenticator.h b/src/plugins/messageservices/pop/popauthenticator.h
index 419b9508..a704ab57 100644
--- a/src/plugins/messageservices/pop/popauthenticator.h
+++ b/src/plugins/messageservices/pop/popauthenticator.h
@@ -43,11 +43,7 @@ class PopAuthenticator
 {
 public:
     static bool useEncryption(const QMailAccountConfiguration::ServiceConfiguration &svcCfg, const QStringList &capabilities);
-#ifdef USE_ACCOUNTS_QT
-    static QList<QByteArray> getAuthentication(const QMailAccountConfiguration::ServiceConfiguration &svcCfg, const QStringList &capabilities, const QMap<QString, QList<QByteArray> > &ssoLogin);
-#else
     static QList<QByteArray> getAuthentication(const QMailAccountConfiguration::ServiceConfiguration &svcCfg, const QStringList &capabilities);
-#endif
     static QByteArray getResponse(const QMailAccountConfiguration::ServiceConfiguration &svcCfg, const QByteArray &challenge);
 };
 
diff --git a/src/plugins/messageservices/pop/popclient.cpp b/src/plugins/messageservices/pop/popclient.cpp
index 397566cc..57db3bf1 100644
--- a/src/plugins/messageservices/pop/popclient.cpp
+++ b/src/plugins/messageservices/pop/popclient.cpp
@@ -781,12 +781,15 @@ void PopClient::nextAction()
     {
         emit updateStatus(tr("Logging in"));
 
-        // Get the login command sequence to use
 #ifdef USE_ACCOUNTS_QT
-        authCommands = PopAuthenticator::getAuthentication(config.serviceConfiguration("pop3"), capabilities, ssoLogin);
-#else
-        authCommands = PopAuthenticator::getAuthentication(config.serviceConfiguration("pop3"), capabilities);
+        PopConfigurationEditor editor(&config);
+        if (!ssoUsername.isEmpty())
+            editor.setMailUserName(ssoUsername);
+        if (!ssoPassword.isEmpty())
+            editor.setMailPassword(ssoPassword);
 #endif
+        // Get the login command sequence to use
+        authCommands = PopAuthenticator::getAuthentication(config.serviceConfiguration("pop3"), capabilities);
 
         nextStatus = Auth;
         nextCommand = authCommands.takeFirst();
@@ -1403,7 +1406,8 @@ void PopClient::onSsoSessionResponse(const QMap<QString, QList<QByteArray> > &ss
 {
     qMailLog(POP)  << "Got SSO response";
     if(!ssoCredentials.isEmpty()) {
-        ssoLogin = ssoCredentials;
+        ssoUsername = QString::fromUtf8(ssoCredentials.value(QString::fromLatin1("username")).value(0));
+        ssoPassword = QString::fromUtf8(ssoCredentials.value(QString::fromLatin1("password")).value(0));
         if (sendLogin) {
             sendLogin = false;
             newConnection();
diff --git a/src/plugins/messageservices/pop/popclient.h b/src/plugins/messageservices/pop/popclient.h
index 6ef713ac..2212a2fd 100644
--- a/src/plugins/messageservices/pop/popclient.h
+++ b/src/plugins/messageservices/pop/popclient.h
@@ -206,7 +206,7 @@ private:
     SSOSessionManager* ssoSessionManager;
     bool loginFailed;
     bool sendLogin;
-    QMap<QString, QList<QByteArray> > ssoLogin;
+    QString ssoUsername, ssoPassword;
 #endif
 };
 
diff --git a/src/plugins/messageservices/smtp/smtpauthenticator.cpp b/src/plugins/messageservices/smtp/smtpauthenticator.cpp
index 100bdc27..76fb904e 100644
--- a/src/plugins/messageservices/smtp/smtpauthenticator.cpp
+++ b/src/plugins/messageservices/smtp/smtpauthenticator.cpp
@@ -33,124 +33,17 @@
 
 #include "smtpauthenticator.h"
 
+#include "smtpconfiguration.h"
+
 #include <qmailauthenticator.h>
-#include <qmailstore.h>
-#include <qmaillog.h>
+
 
 namespace {
 
 QMap<QMailAccountId, QList<QByteArray> > gResponses;
 
-#ifdef USE_ACCOUNTS_QT
-QString authPassword;
-QMail::SaslMechanism responseAuthType;
-#endif
-}
-
-#ifdef USE_ACCOUNTS_QT
-// Returns authentication type from more secure to less secure supported
-static SmtpConfiguration::AuthType authFromCapabilities(const QStringList &capabilities, const QMap<QString, QList<QByteArray> > &ssoLogin)
-{
-    QStringList authCaps;
-    foreach (QString const& capability, capabilities) {
-        if (capability.startsWith("AUTH", Qt::CaseInsensitive)) {
-            authCaps.append(capability.split(" ",QString::SkipEmptyParts));
-        }
-    }
-    qMailLog(SMTP) << "Auths found: " << authCaps;
-
-    if (authCaps.contains("CRAM-MD5", Qt::CaseInsensitive) && ssoLogin.contains("CRAM-MD5")) {
-        qMailLog(SMTP) << "Returning auth CRAM-MD5";
-        return SmtpConfiguration::Auth_CRAMMD5;
-    } else if (authCaps.contains("LOGIN", Qt::CaseInsensitive) && !authCaps.contains("PLAIN", Qt::CaseInsensitive)
-               && ssoLogin.contains("LOGIN")) {
-        // LOGIN mechanism is obsolete, use it as last resort, see: http://www.iana.org/assignments/sasl-mechanisms/sasl-mechanisms.xhtml
-        qMailLog(SMTP) <<  "Returning auth LOGIN";
-        return SmtpConfiguration::Auth_LOGIN;
-    } else if (ssoLogin.contains("PLAIN")) {
-        qMailLog(SMTP) << "Returning auth PLAIN";
-        return SmtpConfiguration::Auth_PLAIN;
-    } else {
-        qMailLog(SMTP) << "Returning auth NONE";
-        return SmtpConfiguration::Auth_NONE;
-    }
-}
-
-static QByteArray authenticationResponses(QList<QByteArray> &authList, const SmtpConfiguration::AuthType &authType, const QMailAccountId &id)
-{
-    QByteArray result;
-    if(!authList.empty()) {
-        result = authList.takeFirst();
-        if (!authList.empty()) {
-            if (authType == SmtpConfiguration::Auth_CRAMMD5) {
-                authPassword = QString::fromLatin1(authList.takeFirst());
-                responseAuthType = QMail::CramMd5Mechanism;
-            } else {
-                gResponses[id] = authList;
-            }
-        }
-    } else {
-        qMailLog(SMTP) << "Failed to get authentication for method" << authType << "in account id:" << id;
-    }
-    return result;
-}
-
-QByteArray SmtpAuthenticator::getAuthentication(const QMailAccountConfiguration::ServiceConfiguration &svcCfg, const QStringList &capabilities, const QMap<QString, QList<QByteArray> > &ssoLogin)
-{
-    QByteArray result;
-    SmtpConfiguration smtpCfg(svcCfg);
-    QMailAccountId id(smtpCfg.id());
-    SmtpConfiguration::AuthType authType = static_cast<SmtpConfiguration::AuthType>(smtpCfg.smtpAuthentication());
-
-    // if we don't have auth yet, try to get it from the capabilities
-    if (ssoLogin.size() > 1 && authType == SmtpConfiguration::Auth_NONE
-            && smtpCfg.smtpAuthFromCapabilities()) {
-        qMailLog(SMTP) << "Discovering authentication from capabilities for account id:" << id;
-        authType = authFromCapabilities(capabilities, ssoLogin);;
-        if (authType != SmtpConfiguration::Auth_NONE) {
-            QMailAccount account(id);
-            QMailAccountConfiguration accountConfig(id);
-            QMailAccountConfiguration::ServiceConfiguration serviceConf(accountConfig.serviceConfiguration("smtp"));
-            serviceConf.setValue("authentication",QString::number(authType));
-            if (!QMailStore::instance()->updateAccount(&account, &accountConfig)) {
-                qWarning() << "Unable to update account" << account.id() << "to auth type!!!!";
-            }
-        }
-    }
-
-#ifndef QT_NO_OPENSSL
-    if (authType != SmtpConfiguration::Auth_NONE) {
-        if (!ssoLogin.isEmpty()) {
-            QList<QByteArray> auth;
-
-            if (ssoLogin.size() == 1) {
-                QList<QString> keys = ssoLogin.keys();
-                auth = ssoLogin.value(keys.at(0));
-                result = authenticationResponses(auth, authType, id);
-                qMailLog(SMTP) << "Using authentication method " << keys.at(0)
-                               << " for account id:" << id;
-            } else {
-                if (authType == SmtpConfiguration::Auth_CRAMMD5) {
-                    auth = ssoLogin.value("CRAM-MD5");
-                    result = authenticationResponses(auth, authType, id);
-                } else if (authType == SmtpConfiguration::Auth_PLAIN) {
-                    auth = ssoLogin.value("PLAIN");
-                    result = authenticationResponses(auth, authType, id);
-                } else if (authType == SmtpConfiguration::Auth_LOGIN) {
-                    auth = ssoLogin.value("LOGIN");
-                    result = authenticationResponses(auth, authType, id);
-                }
-            }
-        } else {
-            qMailLog(SMTP) << Q_FUNC_INFO << "SSO identity is not found for account id: "<< id
-                           << ", returning empty authentication";
-        }
-    }
-#endif
-    return result;
 }
 
-#else
 QByteArray SmtpAuthenticator::getAuthentication(const QMailAccountConfiguration::ServiceConfiguration &svcCfg, const QStringList &capabilities)
 {
     QByteArray result(QMailAuthenticator::getAuthentication(svcCfg, capabilities));
@@ -179,7 +72,6 @@ QByteArray SmtpAuthenticator::getAuthentication(const QMailAccountConfiguration:
     }
     return result;
 }
-#endif
 
 QByteArray SmtpAuthenticator::getResponse(const QMailAccountConfiguration::ServiceConfiguration &svcCfg, const QByteArray &challenge)
 {
@@ -193,14 +85,9 @@ QByteArray SmtpAuthenticator::getResponse(const QMailAccountConfiguration::Servi
         if (responses.isEmpty())
             gResponses.erase(it);
     } else {
-#ifdef USE_ACCOUNTS_QT
-        if (!authPassword.isEmpty()) {
-            result = QMailAuthenticator::getResponse(svcCfg, challenge, responseAuthType, authPassword);
-        }
-#else
         result = QMailAuthenticator::getResponse(svcCfg, challenge);
-#endif
     }
 
     return result;
 }
+
diff --git a/src/plugins/messageservices/smtp/smtpauthenticator.h b/src/plugins/messageservices/smtp/smtpauthenticator.h
index 23f31cb2..97300b99 100644
--- a/src/plugins/messageservices/smtp/smtpauthenticator.h
+++ b/src/plugins/messageservices/smtp/smtpauthenticator.h
@@ -34,7 +34,6 @@
 #ifndef SMTPAUTHENTICATOR_H
 #define SMTPAUTHENTICATOR_H
 
-#include "smtpconfiguration.h"
 #include <qmailaccountconfiguration.h>
 
 #include <QByteArray>
@@ -43,11 +42,7 @@
 class SmtpAuthenticator
 {
 public:
-#ifdef USE_ACCOUNTS_QT
-    static QByteArray getAuthentication(const QMailAccountConfiguration::ServiceConfiguration &svcCfg, const QStringList &capabilities, const QMap<QString, QList<QByteArray> > &ssoLogin);
-#else
     static QByteArray getAuthentication(const QMailAccountConfiguration::ServiceConfiguration &svcCfg, const QStringList &capabilities);
-#endif
     static QByteArray getResponse(const QMailAccountConfiguration::ServiceConfiguration &svcCfg, const QByteArray &challenge);
 };
 
diff --git a/src/plugins/messageservices/smtp/smtpclient.cpp b/src/plugins/messageservices/smtp/smtpclient.cpp
index 3caac7f6..a92b5704 100644
--- a/src/plugins/messageservices/smtp/smtpclient.cpp
+++ b/src/plugins/messageservices/smtp/smtpclient.cpp
@@ -116,8 +116,6 @@ SmtpClient::SmtpClient(QObject* parent)
 #ifdef USE_ACCOUNTS_QT
     , ssoSessionManager(0)
     , loginFailed(false)
-    , sendLogin(false)
-    , recreateIdentity(false)
     , recreateIdentityCount(0)
 #endif
 {
@@ -191,11 +189,6 @@ void SmtpClient::newConnection()
 #ifdef USE_ACCOUNTS_QT
     loginFailed = false;
 #endif
-    // Load the current configuration for this account
-    // Reload the account configuration whenever a new SMTP
-    // connection is created, in order to ensure the changes
-    // in the account settings are being managed properly.
-    config = QMailAccountConfiguration(config.id());
 
     if (sending) {
         operationFailed(QMailServiceAction::Status::ErrConnectionInUse, tr("Cannot send message; transport in use"));
@@ -607,32 +600,28 @@ void SmtpClient::nextAction(const QString &response)
         }
         addressComponent = localAddress.toIPv4Address();
 
-        // Find the authentication mode to use
 #ifdef USE_ACCOUNTS_QT
-        if (ssoSessionManager) {
-            // start single signon session
-            status = SignOnSession;
+        if (!ssoSessionManager || !ssoSessionManager->waitForSso()) {
+            status = Authenticate;
             nextAction(QString());
-        } else {
-            // Use credentials from accounts db
-            // Find the authentication mode to use
-            ssoLogin.clear();
-            QByteArray authCmd(SmtpAuthenticator::getAuthentication(config.serviceConfiguration("smtp"), capabilities, ssoLogin));
-            if (!authCmd.isEmpty()) {
-                sendCommand(authCmd);
-                status = Authenticating;
-            } else {
-                foreach (QString const& capability, capabilities) {
-                    if (capability.startsWith("AUTH", Qt::CaseInsensitive)) {
-                        notUsingAuth = true;
-                        break;
-                    }
-                }
-                status = Authenticated;
-                nextAction(QString());
-            }
         }
 #else
+        status = Authenticate;
+        nextAction(QString());
+#endif
+        break;
+    }
+    case Authenticate:
+    {
+#ifdef USE_ACCOUNTS_QT
+#ifndef QT_NO_SSL
+        SmtpConfigurationEditor editor(&config);
+        if (!ssoUsername.isEmpty())
+            editor.setSmtpUsername(ssoUsername);
+        if (!ssoPassword.isEmpty())
+            editor.setSmtpPassword(ssoPassword);
+#endif
+#endif
         QByteArray authCmd(SmtpAuthenticator::getAuthentication(config.serviceConfiguration("smtp"), capabilities));
         if (!authCmd.isEmpty()) {
             sendCommand(authCmd);
@@ -648,43 +637,8 @@ void SmtpClient::nextAction(const QString &response)
             status = Authenticated;
             nextAction(QString());
         }
-#endif
         break;
     }
-#ifdef USE_ACCOUNTS_QT
-    case SignOnSession:
-    {
-        if (loginFailed) {
-            if (ssoSessionManager && ssoSessionManager->checkingCredentials()) {
-                operationFailed(QMailServiceAction::Status::ErrLoginFailed, response);
-            } else {
-                if (ssoSessionManager) {
-                    sendLogin = true;
-                    ssoSessionManager->recreateSsoIdentity();
-                } else {
-                    operationFailed(QMailServiceAction::Status::ErrLoginFailed, response);
-                }
-            }
-        } else if (recreateIdentity && recreateIdentityCount < 5) {
-            sendLogin = true;
-            ssoSessionManager->recreateSsoIdentity();
-        } else {
-            if (!ssoSessionManager->waitForSso()) {
-                QByteArray authCmd(SmtpAuthenticator::getAuthentication(config.serviceConfiguration("smtp"), capabilities, ssoLogin));
-                if (!authCmd.isEmpty()) {
-                    sendCommand(authCmd);
-                    status = Authenticating;
-                } else {
-                    status = Authenticated;
-                    nextAction(QString());
-                }
-            } else {
-                sendLogin = true;
-            }
-        }
-        break;
-    }
-#endif
     case Authenticating:
     {
         if (responseCode == 334) {
@@ -729,21 +683,19 @@ void SmtpClient::nextAction(const QString &response)
             }
         } else if (responseCode == 530) {
             operationFailed(QMailServiceAction::Status::ErrConfiguration, response);
-        } else {
 #ifdef USE_ACCOUNTS_QT
-            if (ssoSessionManager && ssoSessionManager->checkingCredentials()) {
-               operationFailed(QMailServiceAction::Status::ErrLoginFailed, response);
-            } else if (!loginFailed) {
+        } else if (ssoSessionManager && !ssoSessionManager->checkingCredentials()) {
+            if (!loginFailed) {
                 loginFailed = true;
-                status = SignOnSession;
-                nextAction(QString());
+                status = Connected;
+                ssoSessionManager->recreateSsoIdentity();
             } else {
                 ssoCredentialsNeedUpdate();
                 operationFailed(QMailServiceAction::Status::ErrLoginFailed, response);
             }
-#else
-            operationFailed(QMailServiceAction::Status::ErrLoginFailed, response);
 #endif
+        } else {
+            operationFailed(QMailServiceAction::Status::ErrLoginFailed, response);
         }
         // Otherwise, we're authenticated
         break;
@@ -1189,20 +1141,13 @@ void SmtpClient::removeSsoIdentity(const QMailAccountId &accountId)
 void SmtpClient::onSsoSessionResponse(const QMap<QString, QList<QByteArray> > &ssoCredentials)
 {
     qMailLog(SMTP)  << "Got SSO response";
-    if(!ssoCredentials.isEmpty()) {
-        ssoLogin = ssoCredentials;
-        if (sendLogin) {
-            sendLogin = false;
-            recreateIdentity = false;
+    if (!ssoCredentials.isEmpty()) {
+        ssoUsername = QString::fromUtf8(ssoCredentials.value(QString::fromLatin1("username")).value(0));
+        ssoPassword = QString::fromUtf8(ssoCredentials.value(QString::fromLatin1("password")).value(0));
+        if (status == Connected) {
             recreateIdentityCount = 0;
-            QByteArray authCmd(SmtpAuthenticator::getAuthentication(config.serviceConfiguration("smtp"), capabilities, ssoLogin));
-            if (!authCmd.isEmpty()) {
-                sendCommand(authCmd);
-                status = Authenticating;
-            } else {
-                status = Authenticated;
-                nextAction(QString());
-            }
+            status = Authenticate;
+            nextAction(QString());
         }
     }
 }
@@ -1211,11 +1156,13 @@ void SmtpClient::onSsoSessionError(const QString &error)
 {
     // Reset vars
     loginFailed = false;
-    sendLogin = false;
-    recreateIdentity = true;
-    // used to prevent a potencial error loop and mutiple calls to sso
-    recreateIdentityCount++;
+    ssoUsername = QString();
+    ssoPassword = QString();
     qMailLog(SMTP) <<  "Got SSO error:" << error;
     operationFailed(QMailServiceAction::Status::ErrLoginFailed, error);
+    // used to prevent a potencial error loop and mutiple calls to sso
+    if (++recreateIdentityCount < 5) {
+        ssoSessionManager->recreateSsoIdentity();
+    }
 }
 #endif
diff --git a/src/plugins/messageservices/smtp/smtpclient.h b/src/plugins/messageservices/smtp/smtpclient.h
index 91d0e517..8411ba3d 100644
--- a/src/plugins/messageservices/smtp/smtpclient.h
+++ b/src/plugins/messageservices/smtp/smtpclient.h
@@ -124,19 +124,11 @@ private:
     void stopTransferring();
 
 private:
-#ifdef USE_ACCOUNTS_QT
-    enum TransferStatus
-    {
-        Init, Helo, Extension, StartTLS, TLS, Connected, SignOnSession,  Authenticating, Authenticated,
-        MetaData, From, Recv, MRcv, PrepareData, Data, Body, Chunk, ChunkSent, Sent, Quit, Done
-    };
-#else
     enum TransferStatus
     {
-        Init, Helo, Extension, StartTLS, TLS, Connected, Authenticating, Authenticated,
+        Init, Helo, Extension, StartTLS, TLS, Connected, Authenticate, Authenticating, Authenticated,
         MetaData, From, Recv, MRcv, PrepareData, Data, Body, Chunk, ChunkSent, Sent, Quit, Done
     };
-#endif
 
     QMailAccountConfiguration config;
     TransferStatus status;
@@ -175,10 +167,8 @@ private:
 #ifdef USE_ACCOUNTS_QT
     SSOSessionManager* ssoSessionManager;
     bool loginFailed;
-    bool sendLogin;
-    bool recreateIdentity;
     int recreateIdentityCount;
-    QMap<QString, QList<QByteArray> > ssoLogin;
+    QString ssoUsername, ssoPassword;
 #endif
 };
 
diff --git a/src/plugins/ssoauth/password/passwordplugin.cpp b/src/plugins/ssoauth/password/passwordplugin.cpp
index 00ad7e73..b95e92d7 100644
--- a/src/plugins/ssoauth/password/passwordplugin.cpp
+++ b/src/plugins/ssoauth/password/passwordplugin.cpp
@@ -46,43 +46,6 @@
 #include <Accounts/Manager>
 #include <Accounts/Account>
 
-// From Qt Messaging Framework IMAP plugin
-// Ensure a string is quoted, if required for IMAP transmission
-// As per IMAP4 rfc 2060 section 4.2
-QString quoteIMAPString(const QString& input)
-{
-    // We can't easily catch controls other than those caught by \\s...
-    QRegExp atomSpecials("[\\(\\)\\{\\s\\*%\\\\\"\\]]");
-
-    // The empty string must be quoted
-    if (input.isEmpty())
-        return QString("\"\"");
-
-    if (atomSpecials.indexIn(input) == -1)
-        return input;
-
-    // We need to quote this string because it is not an atom
-    QString result(input);
-
-    QString::iterator begin = result.begin(), it = begin;
-    while (it != result.end()) {
-        // We need to escape any characters specially treated in quotes
-        if ((*it) == '\\' || (*it) == '"') {
-            int pos = (it - begin);
-            result.insert(pos, '\\');
-            it = result.begin() + (pos + 1);
-        }
-        ++it;
-    }
-
-    return QMail::quoteString(result);
-}
-
-QByteArray quoteIMAPString(const QByteArray& input)
-{
-    return quoteIMAPString(QString::fromLatin1(input)).toLatin1();
-}
-
 SSOPasswordPlugin::SSOPasswordPlugin(QObject *parent)
     : SSOAuthService(parent)
     , m_accountManager(new Accounts::Manager(this))
@@ -93,85 +56,6 @@ SSOPasswordPlugin::~SSOPasswordPlugin()
 {
 }
 
-QMap<QString, QList<QByteArray> > SSOPasswordPlugin::getIMAPAuthentication(const QString &password,
-                                                    const QString &username) const
-{
-    QMap<QString, QList<QByteArray> > result;
-
-    // Add PLAIN auth
-    QByteArray user(username.toUtf8());
-    QByteArray pass(password.toUtf8());
-
-    QList<QByteArray> plainAuth;
-    plainAuth.append(QByteArray("AUTHENTICATE PLAIN"));
-    plainAuth.append(QByteArray(user + '\0' + user + '\0' + pass));
-    result.insert(QString::fromLatin1("PLAIN"), plainAuth);
-
-    // Add LOGIN auth
-    result.insert(QString::fromLatin1("LOGIN"), QList<QByteArray>() << QByteArray("LOGIN") + ' ' + quoteIMAPString(username.toUtf8())
-                  + ' ' + quoteIMAPString(password.toUtf8()));
-
-    // Add CRAM_MD5
-    QList<QByteArray> cramAuth;
-    cramAuth.append(QByteArray("AUTHENTICATE CRAM-MD5"));
-    cramAuth.append(QByteArray(password.toUtf8()));
-    result.insert(QString::fromLatin1("CRAM-MD5"), cramAuth);
-
-    return result;
-}
-
-QMap<QString, QList<QByteArray> > SSOPasswordPlugin::getPOPAuthentication(const QString &password,
-                                                   const QString &username) const
-{
-    QMap<QString, QList<QByteArray> > result;
-
-    // Add PLAIN auth
-    QList<QByteArray> plainAuth;
-    plainAuth.append(QByteArray("USER ") + username.toUtf8());
-    plainAuth.append(QByteArray("PASS ") + password.toUtf8());
-    result.insert(QString::fromLatin1("PLAIN"), plainAuth);
-
-    // Currently pop account does not have any auth settings, so only plain can be used
-
-    // Add CRAM-MD5
-    /*QList<QByteArray> cramAuth;
-    cramAuth.append(QByteArray("AUTH CRAM-MD5"));
-    cramAuth.append(QByteArray(password.toLatin1()));
-    result.insert(QString::fromLatin1("CRAM-MD5"), cramAuth);*/
-
-    return result;
-}
-
-QMap<QString, QList<QByteArray> > SSOPasswordPlugin::getSMTPAuthentication(const QString &password,
-                                                    const QString &username) const
-{
-    QMap<QString, QList<QByteArray> > result;
-
-    QByteArray user(username.toUtf8());
-    QByteArray pass(password.toUtf8());
-
-    // Add PLAIN auth
-    QList<QByteArray> plainAuth;
-    plainAuth.append(QByteArray("AUTH PLAIN ") + QByteArray(user + '\0' + user + '\0' + pass).toBase64());
-    plainAuth.append(QByteArray(user + '\0' + user + '\0' + pass));
-    result.insert(QString::fromLatin1("PLAIN"), plainAuth);
-
-    // Add LOGIN auth
-    QList<QByteArray> loginAuth;
-    loginAuth.append(QByteArray("AUTH LOGIN"));
-    loginAuth.append(QByteArray(user));
-    loginAuth.append(QByteArray(pass));
-    result.insert(QString::fromLatin1("LOGIN"), loginAuth);
-
-    // Add CRAM-MD5 auth
-    QList<QByteArray> cramAuth;
-    cramAuth.append(QByteArray("AUTH CRAM-MD5"));
-    cramAuth.append(QByteArray(pass));
-    result.insert(QString::fromLatin1("CRAM-MD5"), cramAuth);
-
-    return result;
-}
-
 SSOAuthService* SSOPasswordPlugin::createService()
 {
     return this;
@@ -185,21 +69,18 @@ QString SSOPasswordPlugin::key() const
 QMap<QString, QList<QByteArray> > SSOPasswordPlugin::authentication(const SignOn::SessionData &sessionData,
                                                 const QString &serviceType, const QString &userName) const
 {
+    Q_UNUSED(serviceType);
+
     QString password = sessionData.Secret();
     QString username = sessionData.UserName();
 
     if (username.isEmpty())
         username = userName;
 
-    if (serviceType == "imap4") {
-        return getIMAPAuthentication(password, username);
-    } else if (serviceType == "pop3") {
-        return getPOPAuthentication(password, username);
-    } else if (serviceType == "smtp") {
-        return getSMTPAuthentication(password, username);
-    } else {
-        return QMap<QString, QList<QByteArray> >();
-    }
+    QMap<QString, QList<QByteArray> > ssoLogin;
+    ssoLogin.insert(QString::fromLatin1("username"), QList<QByteArray>() << username.toUtf8());
+    ssoLogin.insert(QString::fromLatin1("password"), QList<QByteArray>() << password.toUtf8());
+    return ssoLogin;
 }
 
 void SSOPasswordPlugin::credentialsNeedUpdate(int accountId)
diff --git a/src/plugins/ssoauth/password/passwordplugin.h b/src/plugins/ssoauth/password/passwordplugin.h
index a2f66cd9..7b799885 100644
--- a/src/plugins/ssoauth/password/passwordplugin.h
+++ b/src/plugins/ssoauth/password/passwordplugin.h
@@ -49,7 +49,6 @@
 
 namespace Accounts {
     class Manager;
-    class Account;
 }
 
 class SSOPasswordPlugin : public SSOAuthService
@@ -69,9 +68,6 @@ public:
     virtual SSOAuthService* createService();
 
 private:
-    QMap<QString, QList<QByteArray> > getIMAPAuthentication(const QString &password, const QString &username) const;
-    QMap<QString, QList<QByteArray> > getPOPAuthentication(const QString &password, const QString &username) const;
-    QMap<QString, QList<QByteArray> > getSMTPAuthentication(const QString &password, const QString &username) const;
     Accounts::Manager *m_accountManager;
 };
 
